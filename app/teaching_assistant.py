class TeachingAssistant:
    def __init__(self, groq_model):
        self.groq_model = groq_model
        self.current_question = None
        self.current_level = 0
        self.questions_per_level = 3
        self.questions_answered = 0
        self.topics = {
            0: [
                "arquitetura von Neumann",
                "ciclo de instru√ß√£o",
                "registradores",
                "mem√≥ria principal",
                "unidade l√≥gica e aritm√©tica",
                "barramento de dados",
                "barramento de endere√ßos",
                "barramento de controle",
                "clock do processador"
            ],
            1: [
                "mem√≥ria cache",
                "pipeline",
                "conjunto de instru√ß√µes",
                "arquitetura RISC",
                "arquitetura CISC",
                "mem√≥ria virtual",
                "DMA (Direct Memory Access)",
                "interrup√ß√µes",
                "E/S mapeada em mem√≥ria",
                "microarquitetura"
            ],
            2: [
                "hierarquia de mem√≥ria",
                "barramentos",
                "unidade de controle",
                "paralelismo em n√≠vel de instru√ß√£o",
                "superescalar",
                "branch prediction",
                "mem√≥ria associativa",
                "coer√™ncia de cache",
                "protocolo MESI",
                "arquitetura multicore",
                "SIMD (Single Instruction Multiple Data)",
                "MIMD (Multiple Instruction Multiple Data)"
            ]
        }
        
    def start_level(self, level):
        """Inicia um novo n√≠vel."""
        if level >= len(self.topics):
            return {
                "gameComplete": True,
                "message": "Parab√©ns! Voc√™ completou todos os n√≠veis! üéâ"
            }
        
        self.current_level = level
        self.questions_answered = 0
        question_data = self.generate_question()
        return {
            "type": "question",
            "text": question_data["question"]["question"],
            "question": question_data["question"],
            "progress": 0
        }

    def next_question(self):
        """Gera a pr√≥xima pergunta do n√≠vel atual."""
        self.questions_answered += 1
        if self.questions_answered >= self.questions_per_level:
            return {
                "levelComplete": True,
                "message": "N√≠vel completo! üéâ"
            }
            
        question_data = self.generate_question()
        return {
            "type": "question",
            "text": question_data["question"]["question"],
            "question": question_data["question"],
            "progress": (self.questions_answered / self.questions_per_level) * 100
        }
        
    def process_question(self, user_input, level=None):
        """Processa a entrada do usu√°rio e retorna uma resposta apropriada."""
        if level is not None and level != self.current_level:
            self.current_level = level
            
        if "o que √©" in user_input.lower() or "para que serve" in user_input.lower():
            return self.explain_concept(user_input)
        
        if self.current_question:
            return self.check_answer(user_input)
        
        question_data = self.generate_question()
        return {
            "type": "question",
            "text": question_data["question"]["question"],
            "question": question_data["question"],
            "progress": (self.questions_answered / self.questions_per_level) * 100
        }

    def explain_concept(self, concept):
        """Cria um prompt para explicar conceitos de arquitetura de computadores."""
        prompt = (
            f"Explique o conceito de '{concept}' no contexto de Arquitetura e Organiza√ß√£o de Computadores. "
            "Use linguagem t√©cnica apropriada, mas mantenha a explica√ß√£o clara e objetiva. "
            "Inclua exemplos pr√°ticos quando poss√≠vel e relacione com outros conceitos relevantes. "
            "Se aplic√°vel, mencione a evolu√ß√£o hist√≥rica e as implementa√ß√µes modernas. "
            "Responda em portugu√™s e mantenha um tom profissional."
        )
        return {
            "type": "explanation",
            "text": self.groq_model.get_response(prompt)
        }

    def generate_question(self):
        """Gera uma nova pergunta usando o LLM."""
        import random
        
        if self.current_level not in self.topics:
            return {
                "type": "error",
                "message": "N√≠vel inv√°lido"
            }
            
        topic = random.choice(self.topics[self.current_level])
        prompt = (
            f"Crie uma pergunta t√©cnica sobre {topic} no contexto de Arquitetura e Organiza√ß√£o de Computadores. "
            "A pergunta deve ser adequada para estudantes de computa√ß√£o. "
            f"Para o n√≠vel {self.current_level} (0=b√°sico, 1=intermedi√°rio, 2=avan√ßado), "
            "ajuste a complexidade t√©cnica apropriadamente. "
            "A pergunta pode envolver compara√ß√µes, an√°lises de desempenho, casos de uso, "
            "vantagens e desvantagens, ou aspectos hist√≥ricos do tema. "
            "Forne√ßa a resposta esperada e 5 conceitos-chave relacionados ao tema. "
            "Responda no seguinte formato JSON:\n"
            "{\n"
            '  "question": "sua pergunta t√©cnica aqui",\n'
            '  "expected_answer": "resposta t√©cnica detalhada aqui",\n'
            '  "keywords": ["conceito1", "conceito2", "conceito3", "conceito4", "conceito5"],\n'
            '  "points": "n√∫mero de pontos (10-20)"\n'
            "}"
        )
        
        try:
            response = self.groq_model.get_response(prompt)
            # Limpa a resposta para garantir que √© um JSON v√°lido
            response = response.strip()
            if response.startswith("```json"):
                response = response[7:-3]  # Remove ```json e ```
            
            import json
            question_data = json.loads(response)
            
            self.current_question = {
                "topic": topic,
                "question": question_data["question"],
                "expected_answer": question_data["expected_answer"],
                "keywords": question_data["keywords"],
                "points": int(question_data.get("points", 10)),
                "progress": (self.questions_answered / self.questions_per_level) * 100
            }
            
            return {
                "question": self.current_question
            }
            
        except Exception as e:
            # Fallback para uma pergunta b√°sica em caso de erro
            self.current_question = {
                "topic": topic,
                "question": f"Explique o conceito de {topic} no contexto de Arquitetura de Computadores.",
                "expected_answer": f"Uma explica√ß√£o t√©cnica sobre {topic} e sua import√¢ncia na arquitetura de computadores",
                "keywords": [topic, "arquitetura", "computador", "hardware", "processamento"],
                "points": 10,
                "progress": (self.questions_answered / self.questions_per_level) * 100
            }
            
            return {
                "question": self.current_question
            }

    def check_answer(self, user_answer):
        """Verifica a resposta do usu√°rio."""
        if not self.current_question:
            question_data = self.generate_question()
            return {
                "type": "question",
                "text": question_data["question"]["question"],
                "question": question_data["question"],
                "progress": (self.questions_answered / self.questions_per_level) * 100
            }

        # Verifica as palavras-chave na resposta do usu√°rio
        user_words = user_answer.lower().split()
        matched_keywords = [
            keyword for keyword in self.current_question["keywords"]
            if keyword.lower() in user_words
        ]

        # Usa o LLM para avaliar a resposta de forma mais t√©cnica
        prompt = (
            f"Avalie tecnicamente a resposta para a seguinte quest√£o de Arquitetura de Computadores:\n\n"
            f"Pergunta: {self.current_question['question']}\n"
            f"Resposta esperada: {self.current_question['expected_answer']}\n"
            f"Resposta do aluno: {user_answer}\n\n"
            "Considere a precis√£o t√©cnica, uso correto dos conceitos e profundidade da explica√ß√£o. "
            "Responda apenas com 'correto' ou 'incorreto'"
        )
        
        try:
            evaluation = self.groq_model.get_response(prompt).lower().strip()
            is_correct = evaluation == "correto" or len(matched_keywords) >= len(self.current_question["keywords"]) * 0.6
            
            if is_correct:
                points = self.current_question["points"]
                expected_answer = self.current_question["expected_answer"]
                self.questions_answered += 1
                level_complete = self.questions_answered >= self.questions_per_level
                self.current_question = None  # Reset para pr√≥xima pergunta
                
                return {
                    "type": "feedback",
                    "correct": True,
                    "message": "Excelente! Sua resposta demonstra compreens√£o t√©cnica do conceito.",
                    "explanation": expected_answer,
                    "points": points,
                    "levelComplete": level_complete
                }
            else:
                return {
                    "type": "feedback",
                    "correct": False,
                    "message": "Sua resposta precisa de mais precis√£o t√©cnica.",
                    "hint": f"Revise os conceitos de {', '.join(self.current_question['keywords'][:2])}..."
                }
                
        except Exception as e:
            # Fallback para verifica√ß√£o b√°sica em caso de erro do LLM
            is_correct = len(matched_keywords) >= len(self.current_question["keywords"]) * 0.6
            
            if is_correct:
                points = self.current_question["points"]
                expected_answer = self.current_question["expected_answer"]
                self.questions_answered += 1
                level_complete = self.questions_answered >= self.questions_per_level
                self.current_question = None
                
                return {
                    "type": "feedback",
                    "correct": True,
                    "message": "Excelente! Sua resposta demonstra compreens√£o t√©cnica do conceito.",
                    "explanation": expected_answer,
                    "points": points,
                    "levelComplete": level_complete
                }
            else:
                return {
                    "type": "feedback",
                    "correct": False,
                    "message": "Sua resposta precisa de mais precis√£o t√©cnica.",
                    "hint": f"Revise os conceitos de {', '.join(self.current_question['keywords'][:2])}..."
                }

    def get_progress(self):
        """Retorna o progresso atual do aluno."""
        return {
            "level": self.current_level,
            "questions_answered": self.questions_answered,
            "total_questions": self.questions_per_level,
            "progress": (self.questions_answered / self.questions_per_level) * 100,
            "current_topic": self.current_question["topic"] if self.current_question else None,
            "topics_available": self.topics[self.current_level]
        }
